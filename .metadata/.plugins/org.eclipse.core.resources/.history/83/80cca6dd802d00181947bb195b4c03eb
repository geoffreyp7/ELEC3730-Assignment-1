//     $Date: 2018-03-11 05:18:25 +1100 (Sun, 11 Mar 2018) $
// $Revision: 1206 $
//   $Author: Peter $

// Question 2

#include "Ass-01.h"

/*
 * Takes a pointer to pcm wavefile header struct, a char ** for data and an input filename.
 * Reads the pcm wavefile header, prints and stores it in the struct pointer.
 * Reads the pcm wavefile data and stores it in the data pointer.
 */
int read_pcm_wavefile(pcm_wavefile_header_t *header_p, char **data_p, char *filename)
{

	  FILE * input = fopen(filename, "rb");
	  if (!input) {
		  printf("\nERROR: Could not open input file!\n\n");
		  return -1;
	  }

	  //Checks if header is complete
	  if (fread((void*)header_p, sizeof(pcm_wavefile_header_t), 1, input) == 1) {

		  /*
		   * The following code prints the header values and checks them for
		   * validity
		   */
		  printf("\nChunkID = %.4s\n", header_p->ChunkID);

		  uint8_t correct_ChunkID[4] = {'R', 'I', 'F', 'F'};

		  for (int i=0; i<4; i++) {
			  if (header_p->ChunkID[i] != correct_ChunkID[i]) {
				  printf("\nERROR: Header is corrupt!\n\n");
				  return -1;
			  }
		  }

		  printf("ChunkSize = %d\n", header_p->ChunkSize);
		  printf("Format = %.4s\n", header_p->Format);
		  printf("Subchunk1ID = %.4s\n", header_p->Subchunk1ID);

		  uint8_t correct_Subchunk1ID[4] = {'f', 'm', 't', ' '};

		  for (int i=0; i<4; i++) {
			  if (header_p->Subchunk1ID[i] != correct_Subchunk1ID[i]) {
				  printf("\nERROR: Header is corrupt!\n\n");
				  return -1;
			  }
		  }

		  printf("Subchunk1Size = %d\n", header_p->Subchunk1Size);
		  printf("AudioFormat = %d\n", header_p->AudioFormat);

		  if (header_p->AudioFormat == 1) {
			  printf("NumChannels = %d\n", header_p->NumChannels);
			  printf("SampleRate = %d\n", header_p->SampleRate);
			  printf("ByteRate = %d\n", header_p->ByteRate);
			  printf("BlockAlign = %d\n", header_p->BlockAlign);
			  printf("BitsPerSample = %d\n", header_p->BitsPerSample);
			  printf("Subchunk2ID = %.4s\n", header_p->Subchunk2ID);
			  printf("Subchunk2Size = %d\n", header_p->Subchunk2Size);
		  } else {
			  printf("\nERROR: File is not PCM encoded!\n\n");
			  return -1;
		  }

	  } else {
		  printf("\nERROR: Header is corrupt!\n");
		  return -1;
	  }

	  //Allocate memory for data
	  if ((*data_p = malloc(sizeof(char) * (header_p->Subchunk2Size))) == NULL) {
		  printf("\nERROR: Memory allocation error!\n\n");
		  return -1;
	  }

	  int num_read = fread(*data_p, 1, header_p->Subchunk2Size, input);

	  if (num_read != header_p->Subchunk2Size) {

		  printf("\nERROR: Data is corrupt! (There is less data than expected)\n\n");
		  printf("%d \n", num_read);
		  return -1;
	  }

	  /*
	   * This code checks if there is more data after what should be the end of the file.
	   * Since a wav file may be zero buffered to make an even number of bytes the file
	   * is test read twice.
	   */
	  if (fgetc(input) != -1) {

		  if (header_p->Subchunk2Size % 2 == 0 || fgetc(input) != -1) {
			  printf("\nERROR: File is corrupt! (There is more data than expected)\n\n");
			  return -1;
		  }
	  }

	  if (fclose(input) != 0) {
		  printf("\n\nERROR: Input file close error!\n");
		  return -1;
	  }

	  return 0;

}

/*
 * Takes a pointer to a pcm wavefile header struct, pcm wav data and an output filename.
 * Writes a wavfile the the given header info and data.
 */
int write_pcm_wavefile(pcm_wavefile_header_t *header_p, char *data, char *filename)
{


    FILE * output = fopen(filename, "wb");
    if (!output) {
		  printf("\nERROR: Could not open output file!\n\n");
		  return -1;
    }

    //Writes the header
    if (fwrite(header_p, sizeof(pcm_wavefile_header_t), 1, output) == 1) {

    	//Writes the data
        if (fwrite(data, 1, header_p->Subchunk2Size, output) != header_p->Subchunk2Size) {

        	printf("\nERROR: Problem writing data. \n\n");
        	return -1;
        }

    } else {
    	printf("\nERROR: Problem writing header. \n\n");
    	return -1;
    }

	if (fclose(output) != 0) {
		printf("\n\nERROR: Output file close error!\n");
		return -1;
	}

    return 0;
}


