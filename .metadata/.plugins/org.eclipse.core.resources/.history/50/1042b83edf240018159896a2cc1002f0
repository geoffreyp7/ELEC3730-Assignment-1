//     $Date: 2018-03-11 05:18:25 +1100 (Sun, 11 Mar 2018) $
// $Revision: 1206 $
//   $Author: Peter $

#include "Ass-01.h"

int string_parser(char *inp, char **array_of_words_p[])
{
	  int string_length;
	  int num_words = 0;

	  //Check if input string is null and then if not,
	  //store length of string and check if string is empty
	  if (inp && (string_length = strlen(inp))) {

		  //true when a space has been encountered,
		  //initially set to true to capture first word,
		  //reset at beginning of new word
		  int space_found = 1;

		  //Step through the entire string
		  for (int i=0; i<string_length; i++) {

			  if (inp[i] == ' ') {
				  space_found = 1;
			  }

              //A new word has been found
			  if (isalpha(inp[i]) && space_found) {

				  //Malloc an inital piece of memory
				  char * word = malloc(sizeof(char)*INIT_WORD_LENGTH);
				  if (!word) {
					  //TODO: HANDLE MALLOC ERROR
					  printf("MALLOC ERROR!\n");
					  exit(1);
				  }

				  int mem_size = INIT_WORD_LENGTH; //Size of current memory allocation
				  int num_chars; //Number of characters currently in word

				  //Step through the word and copy it into char * word
				  for (num_chars = 0; inp[i] != ' '; i++, num_chars++) {

                      if (num_chars < mem_size) {
                    	  //If there is enough memory simply store the char
                    	  word[num_chars] = inp[i];
                      } else {
                    	  //If there is not enough memory increase the size
                    	  word = realloc(word, sizeof(char)*(mem_size += INIT_WORD_LENGTH));
        				  if (!word) {
        					  //TODO: HANDLE MALLOC ERROR
        					  printf("MALLOC ERROR!\n");
        					  exit(1);
        				  }
                      }
				  }

				  //Make the memory allocation only as big as the current word length
				  //plus enough for the NULL character
				  word = realloc(word, sizeof(char) * (num_chars+1));
				  if (!word) {
					  //TODO: HANDLE MALLOC ERROR
					  printf("MALLOC ERROR!\n");
					  exit(1);
				  }

				  //Terminate the string with the NULL character
				  word[num_chars] = '\0';
				  num_chars++;

				  (*array_of_words_p)[num_words] = word; //Add the word the the array

				  space_found = 0; //reset for next word
				  i--; //Step the index back to the end of the last word
				  num_words++; //Increase the word count

			  }
		  }

	  } else {

		  //TODO: Handle empty or NULL string
	  }

	  return num_words;
}
